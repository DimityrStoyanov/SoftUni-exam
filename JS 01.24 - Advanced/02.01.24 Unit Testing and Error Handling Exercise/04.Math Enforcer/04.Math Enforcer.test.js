import { assert } from "chai"
import { mathEnforcer } from "./04.Math Enforcer.js"

describe("Testing addFive", function () {
    it("Testing type of num", function () {
        assert.equal(mathEnforcer.addFive(5), 10, "Correct add 5.")
        assert.equal(mathEnforcer.addFive("5"), undefined, "Correct add 5.")
        assert.equal(mathEnforcer.addFive(0), 5, "Correct add 5.")
        assert.equal(mathEnforcer.addFive(-2), 3, "Correct add 5.")
        assert.equal(mathEnforcer.addFive(-5), 0, "Correct add 5.")
        assert.equal(mathEnforcer.addFive(-10), -5, "Correct add 5.")
        assert.equal(mathEnforcer.addFive(-10.5), -5.5, "Correct add 5.")
        assert.equal(mathEnforcer.addFive(5.5), 10.5, "Correct add 5.")
        assert.equal(mathEnforcer.addFive([]), undefined, "Correct add 5.")
        assert.equal(mathEnforcer.addFive({}), undefined, "Correct add 5.")
        assert.equal(mathEnforcer.addFive(null), undefined, "Correct add 5.")
    })

    describe("Testing substract ten", function () {
        it("Testing type of num", function () {
            assert.equal(mathEnforcer.subtractTen(15), 5, "Correct substract ten.")
            assert.equal(mathEnforcer.subtractTen("5"), undefined, "Correct substract ten.")
            assert.equal(mathEnforcer.subtractTen(0), -10, "Correct substract ten.")
            assert.equal(mathEnforcer.subtractTen(3), -7, "Correct substract ten.")
            assert.equal(mathEnforcer.subtractTen(-10), -20, "Correct substract ten.")
            assert.equal(mathEnforcer.subtractTen(10), 0, "Correct substract ten.")
            assert.equal(mathEnforcer.subtractTen(-10.5), -20.5, "Correct substract ten.")
            assert.equal(mathEnforcer.subtractTen(5.5), -4.5, "Correct substract ten.")
            assert.equal(mathEnforcer.subtractTen([]), undefined, "Correct substract ten.")
            assert.equal(mathEnforcer.subtractTen({}), undefined, "Correct substract ten.")
            assert.equal(mathEnforcer.subtractTen(null), undefined, "Correct substract ten.")
        })
    })
    describe("Testing sum", function () {
        it("Testing type of num", function () {
            assert.equal(mathEnforcer.sum(15, 5), 20, "Correct sum.")
            assert.equal(mathEnforcer.sum(5, 15), 20, "Correct sum.")
            assert.equal(mathEnforcer.sum(-15, 5), -10, "Correct sum.")
            assert.equal(mathEnforcer.sum(15, -5), 10, "Correct sum.")
            assert.equal(mathEnforcer.sum(-15, -5), -20, "Correct sum.")
            assert.equal(mathEnforcer.sum(-5, -15), -20, "Correct sum.")
            assert.equal(mathEnforcer.sum(-15, 0), -15, "Correct sum.")
            assert.equal(mathEnforcer.sum(0, -15), -15, "Correct sum.")
            assert.equal(mathEnforcer.sum(0, 7), 7, "Correct sum.")
            assert.equal(mathEnforcer.sum(7, 0), 7, "Correct sum.")
            assert.equal(mathEnforcer.sum(7.5, 0), 7.5, "Correct sum.")
            assert.equal(mathEnforcer.sum(-7.5, 0), -7.5, "Correct sum.")
            assert.equal(mathEnforcer.sum(0, 7.5), 7.5, "Correct sum.")
            assert.equal(mathEnforcer.sum(7.5, 7.5), 15, "Correct sum.")
            assert.equal(mathEnforcer.sum(-7.5, -7.5), -15, "Correct sum.")
            assert.equal(mathEnforcer.sum([], 7), undefined, "Correct sum.")
            assert.equal(mathEnforcer.sum(7, []), undefined, "Correct sum.")
            assert.equal(mathEnforcer.sum(7, {}), undefined, "Correct sum.")
            assert.equal(mathEnforcer.sum({}, 7), undefined, "Correct sum.")
            assert.equal(mathEnforcer.sum("asd", 7), undefined, "Correct sum.")
            assert.equal(mathEnforcer.sum(7, "asd"), undefined, "Correct sum.")
            assert.equal(mathEnforcer.sum(7, null), undefined, "Correct sum.")
            assert.equal(mathEnforcer.sum(null, 7), undefined, "Correct sum.")
        })
    })
})